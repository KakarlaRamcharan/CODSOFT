import random

# Constants for the players
HUMAN = 'X'
AI = 'O'
EMPTY = ' '

# Define the Tic-Tac-Toe board
board = [EMPTY, EMPTY, EMPTY,
         EMPTY, EMPTY, EMPTY,
         EMPTY, EMPTY, EMPTY]

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for i in range(0, 9, 3):
        print(board[i], "|", board[i + 1], "|", board[i + 2])
    print()

# Function to check if a player has won
def check_win(board, player):
    winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                            (0, 3, 6), (1, 4, 7), (2, 5, 8),
                            (0, 4, 8), (2, 4, 6)]
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True
    return False

# Function to check if the board is full
def is_board_full(board):
    return EMPTY not in board

# Function for the Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, maximizing_player):
    if check_win(board, AI):
        return 1
    elif check_win(board, HUMAN):
        return -1
    elif is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = float('-inf')
        for i in range(9):
            if board[i] == EMPTY:
                board[i] = AI
                eval = minimax(board, depth + 1, False)
                board[i] = EMPTY
                max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(9):
            if board[i] == EMPTY:
                board[i] = HUMAN
                eval = minimax(board, depth + 1, True)
                board[i] = EMPTY
                min_eval = min(min_eval, eval)
        return min_eval

# Function to make the AI's move
def ai_move(board):
    best_move = None
    best_eval = float('-inf')
    for i in range(9):
        if board[i] == EMPTY:
            board[i] = AI
            eval = minimax(board, 0, False)
            board[i] = EMPTY
            if eval > best_eval:
                best_eval = eval
                best_move = i

    board[best_move] = AI

print_board(board)
ai_move(board)
print_board(board)
