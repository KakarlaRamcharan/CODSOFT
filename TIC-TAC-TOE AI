import random 
HUMAN = 'X'
AI = 'O'
EMPTY = ' '
board = [EMPTY,EMPTY,EMPTY,
         EMPTY,EMPTY,EMPTY,
         EMPTY,EMPTY,EMPTY]
def print_board(board):
    for i in range(0, 9, 3):
        print(board[i],"|", board[i + 1], "|" board[i + 2])
    print()
def check_win(board, player):
    winning_combinations = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                            (0, 3, 6), (1, 4, 7), (2, 5, 8),
                            (0, 4, 8), (2, 4, 6)]
    for combo in winning_combinatios:
        if board[combo[0]] == board[combo[1]] == board[combo[combo[2]] ==player:
           return True
    return False
def is_board_full(board):
    return EMPTY not in board
def is_board_full(board):
    return EMPTY not in board
def minimax(board, depth, maximizing_player):
    if check_win(board, AI):
       return 1
    elif check_win(board, HUMAN):
         return -1
    elif is_board_full(board):
         return 0
if maximizing_player:
   max_eval = float('-inf')
   for i in range(9):
       if board[i] == EMPTY:
          board[i] = AI
       eval = minimax(board, depth + 1, False)
       board[i] = EMPTY
       max_eval = max(max_eval,eval)
  return max_eval
else:
    min_eval = float('inf')
    for i in range(9):
        if board[i] == EMPTY:
           board[i] = HUMAN
           eval = minimax(board, depth + 1, True)
           board[i] =EMPTY
           min_eval = min(min_eval, eval)
   return min_eval
def ai_move(board):
    best_move = none
    best_eval = float('=inf')
    for i in range(9):
        if board[i] = EMPTY:
           board[i] =AI
           eval = minimax{board, o, False)
           board[i] = EMPTY
           if eval > best_eval:
              best_eval = eval:
              best_move = i
   return best_move
while True:
     print_board(board)
     move = int(input("Enter your move (0-8): "))

     if board[move] == EMPTY:
        board[move] = HUMAN
     else:
        print(Invalid move. Try again,")
        continue
     if check_win(board. HUMAN):
        print_board(board)
        print("you win")
        break 
     if is_board_full(board):
        print_board(board)
        print("it's a draw!")
        break
     ai_move_index = ai_move(board)
     board[ai_move_index] = AI
     if check_win(board, AI):
        print("AI wins!")
        break
     if is_board_full(board):
        print_board(board)
        print("it's a draw!")
        break
 
         
          
       board[i] =
